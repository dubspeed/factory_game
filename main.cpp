#include <iostream>
#include "src/factory.h"
#include <nlohmann/json.hpp>
#include <fstream>
#include <string>
#include <iostream>
#include <sstream>

using json = nlohmann::json;
using namespace Fac;

/** Function to generate a C** header file from a JSON file of the format
* {
"title": "Resources",
"type": "string",
"enum": [
"CopperOre",
"CopperIngot",
] }
* @param json_file_path path to the JSON file
* @param output_file_path path to the output C header file
*/
void generate_header_file(const std::string &json_file_path, const std::string &output_file_path) {
    std::ifstream i(json_file_path);
    if (!i) {
        std::cerr << "Could not open file: " << json_file_path << std::endl;
        return;
    }
    // Read the whole file into a string stream
    std::stringstream buffer;
    buffer << i.rdbuf();
    // Print to cout
    std::cout << buffer.str();



    json j;
    buffer >> j;

    std::ofstream out(output_file_path);
    out << "#ifndef RESOURCES_H\n";
    out << "#define RESOURCES_H\n\n";
    out << "namespace Fac {\n";
    out << "enum class Resource {\n";
    for (const auto &resource: j["enum"]) {
        out << "\t" << resource.get<std::string>() << ",\n";
    }
    out << "};\n";
    out << "} // Fac\n";
    out << "#endif //RESOURCES_H\n";
}


int main() {
    generate_header_file("../schemas/types/resources.json", "../src/autogenerated/resources.h");
    return 0;
}

