#include <iostream>
#include "src/factory.h"
#include "src/tools/generators.h"
#include <csignal>
#include <thread>
#include <unistd.h>

#include "nlohmann/json.hpp"

using namespace Fac;
using json = nlohmann::json;

volatile sig_atomic_t stop = 0;
auto w = Factory();
char *save_file;

void run_generators() {
    generate_resources_header_file("../schemas/types/resources.json", "../src/autogenerated/resources.h");
    generate_recipes_header_file("../data/recipe.json", "../src/autogenerated/recipes.h");
}

void saveWorld(Factory &w) {
    std::cout << "Saving world\n";
    std::ofstream current_save_file = std::ofstream(save_file);;
    json j = w;
    auto buffer = std::stringstream();
    buffer << j.dump(4);
    current_save_file << j.dump(4);
    current_save_file.flush();
    current_save_file.close();
    std::cout << "World saved\n";
}

void signal_handler(int signal) {
    stop = 1;
    std::cout << "Signal received: " << signal << std::endl;
    saveWorld(w);
}

void setupGameWorld(Factory &w) {
    auto m1 = std::make_shared<Machine>(Machine());
    w.addEntity(m1);
    auto m2 = std::make_shared<Machine>(Machine());
    w.addEntity(m2);
    auto belt = std::make_shared<Belt>(1);
    w.addEntity(belt);
    m1->setRecipe(recipe_IronIngot);
    m2->setRecipe(recipe_IronPlate);
    belt->connectInput(0, m1, 0);
    m2->connectInput(0, belt, 0);
    m1->getInputStack(0)->addAmount(MAX_STACK_SIZE, Resource::IronOre);

    std::cout << "Setup complete\n";
}

#define LIT(x) #x
#define CONNECTION(a, b) std::make_pair<std::shared_ptr<GameWorldEntity> const&, int>(a, b)
#define FROM_SLOT0(a) CONNECTION(a, 0)
#define FROM_SLOT1(a) CONNECTION(a, 1)
#define TO_SLOT0(a) CONNECTION(a, 0)
#define TO_SLOT1(a) CONNECTION(a, 1)
#define LINK(from_output, to_input) linkWithBelt(from_output, to_input)
#define CREATE(id, type) auto const id = create(w, type()) ; id->name = "" LIT(id)
#define CRAFTER(name, recipe) CREATE(name, Machine); name->setRecipe(recipe_##recipe)
#define SPLITTER(name) CREATE(name, Splitter)
#define MERGER(name) CREATE(name, Merger)
#define EXTRACTOR(name, node) CREATE(name, ResourceExtractor); name->setResourceNode(node)
#define RESOURCE_NODE(name, resource, quality) CREATE(name, ResourceNode) ; name->setResource(Resource::resource); name->setResourceQuality(ResourceQuality::quality)
#define SMALL_STORAGE(name) CREATE(name, Storage) ; name->setMaxItemStacks(12)

typedef std::pair<const std::shared_ptr<GameWorldEntity>, int> Connection;

template<typename T>
requires std::derived_from<T, GameWorldEntity>
auto create(Factory &w, T const &entity) {
    auto e = std::make_shared<T>(entity);
    w.addEntity(e);
    return e;
}

void connectInput(Connection const &from_input, Connection const &to_output) {
    const auto connector = std::dynamic_pointer_cast<IInputProvider>(from_input.first);
    connector->connectInput(from_input.second, to_output.first, to_output.second);
}

void linkWithBelt(Connection const &from_output, Connection const &to_input) {
    CREATE(belt, Belt);
    connectInput(FROM_SLOT0(belt), from_output);
    connectInput(to_input, TO_SLOT0(belt));
}

void setupGameWorld2(Factory &w) {
    RESOURCE_NODE(iron_node, IronOre, Normal);
    EXTRACTOR(iron_extractor, iron_node);

    SPLITTER(sp1);
    LINK(FROM_SLOT0(iron_extractor), TO_SLOT0(sp1));

    // Goal is to make around 300 screws per minute
    // We need 2.5 smelters, 5 rod crafters, and 7.5 screws crafters

    CRAFTER(smelter1, IronIngot);
    LINK(FROM_SLOT0(sp1), TO_SLOT0(smelter1));

    SPLITTER(sp2);
    LINK(FROM_SLOT1(sp1), TO_SLOT0(sp2));

    CRAFTER(smelter2, IronIngot);
    LINK(FROM_SLOT0(sp2), TO_SLOT0(smelter2));

    SPLITTER(sp3);
    LINK(FROM_SLOT1(sp2), TO_SLOT0(sp3));

    CRAFTER(smelter3, IronIngot);
    LINK(FROM_SLOT0(sp3), TO_SLOT0(smelter3));

    MERGER(mg1);
    LINK(FROM_SLOT0(smelter1), TO_SLOT0(mg1));
    LINK(FROM_SLOT0(smelter2), TO_SLOT1(mg1));

    MERGER(mg2);
    LINK(FROM_SLOT0(mg1), TO_SLOT0(mg2));
    LINK(FROM_SLOT0(smelter3), TO_SLOT1(mg2));

    // SMALL_STORAGE(storage1);
    // LINK(FROM_SLOT0(mg2), TO_SLOT0(storage1));

    std::cout << "Iron Ingot Setup complete\n";

    // start IRON_ ROD production

    SPLITTER(sp4);
    LINK(FROM_SLOT0(mg2), TO_SLOT0(sp4));
    CRAFTER(rod1, IronRod);
    LINK(FROM_SLOT0(sp4), TO_SLOT0(rod1));

    SPLITTER(sp5);
    LINK(FROM_SLOT1(sp4), TO_SLOT0(sp5));
    CRAFTER(rod2, IronRod);
    LINK(FROM_SLOT0(sp5), TO_SLOT0(rod2));

    SPLITTER(sp6);
    LINK(FROM_SLOT1(sp5), TO_SLOT0(sp6));
    CRAFTER(rod3, IronRod);
    LINK(FROM_SLOT0(sp6), TO_SLOT0(rod3));

    SPLITTER(sp7);
    LINK(FROM_SLOT1(sp6), TO_SLOT0(sp7));
    CRAFTER(rod4, IronRod);
    LINK(FROM_SLOT0(sp7), TO_SLOT0(rod4));
    CRAFTER(rod5, IronRod);
    LINK(FROM_SLOT1(sp7), TO_SLOT0(rod5));

    MERGER(mg3);
    LINK(FROM_SLOT0(rod1), TO_SLOT0(mg3));
    LINK(FROM_SLOT0(rod2), TO_SLOT1(mg3));

    MERGER(mg4);
    LINK(FROM_SLOT0(mg3), TO_SLOT0(mg4));
    LINK(FROM_SLOT0(rod3), TO_SLOT1(mg4));

    MERGER(mg5);
    LINK(FROM_SLOT0(mg4), TO_SLOT0(mg5));
    LINK(FROM_SLOT0(rod4), TO_SLOT1(mg5));

    MERGER(mg6);
    LINK(FROM_SLOT0(mg5), TO_SLOT0(mg6));
    LINK(FROM_SLOT0(rod5), TO_SLOT1(mg6));

    // ROD production complete

    SMALL_STORAGE(storage2);
    LINK(FROM_SLOT0(mg6), TO_SLOT0(storage2));


}


int main(int argc, char *argv[]) {
    std::signal(SIGINT, signal_handler); // CTRL-C
    std::signal(SIGTERM, signal_handler); // Termination request

    // first argument must be a filename for the save file
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <filename>\n";
        return 1;
    }

    save_file = argv[1];
    std::cout << "Save file: " << save_file << std::endl;

    // try to read the world as json from the safe file, if not continue
    if (std::ifstream i(save_file); i) {
        json j;
        i >> j;
        w = j.get<Factory>();
        std::cout << "Loaded world from file\n";
        i.close();

    } else {
        setupGameWorld2(w);
        std::cout << "Created new world\n";
    }

    std::cout << "Running... (Press CTRL-D or CTRL-C to exit)\n";

    std::string CSI = "\u001B[";
    auto clear = CSI + "2J";
    std::cout << CSI + "s";
    std::cout << std::setprecision(0) << std::fixed;

    // auto entities = w.getEntities();
    while (!stop) {
        std::cout << CSI + "2J";
        w.processWorldStep();
        for (auto &entity: w.getEntities()) {
            if (auto m = std::dynamic_pointer_cast<Machine>(entity); m) {
                std::cout << "Mach:" << std::setw(2) << m->getId() << " " << m->name;
                std::cout << "/I1:" << m->getInputStack(1)->getAmount();
                std::cout << "/I0:" << m->getInputStack(0)->getAmount();
                std::cout << "/O0:" << m->getOutputStack(0)->getAmount();
                std::cout << "/P:" << m->processing;
                std::cout << "/T:" << m->getRecipe().value().processing_time_s * 1000 - m->processing_progress;
                std::cout << std::endl;
            }
            if (auto m = std::dynamic_pointer_cast<Belt>(entity); m) {
                std::cout << "Belt:" << std::setw(2) << m->getId() << " " << m->name;
                std::cout << "/TR:" << m->_in_transit_stack.size();
                std::cout << "/I0:" << m->getInputStack(0)->getAmount();
                std::cout << "/O0:" << m->getOutputStack(0)->getAmount();
                std::cout << "/J:" << m->getJammed();
                std::cout << std::endl;
            }
            if (auto m = std::dynamic_pointer_cast<Splitter>(entity); m) {
                std::cout << "Spli:" << std::setw(2) << m->getId() << " " << m->name;
                std::cout << "/TR:" << m->_in_transit_stack.size();
                std::cout << "/I0:" << m->getInputStack(0)->getAmount();
                std::cout << "/O0:" << m->getOutputStack(0)->getAmount();
                std::cout << "/O1:" << m->getOutputStack(1)->getAmount();
                std::cout << "/J:" << m->getJammed();
                std::cout << std::endl;
            }
            if (auto m = std::dynamic_pointer_cast<Merger>(entity); m) {
                std::cout << "Merg:" << std::setw(2) << m->getId() << " " << m->name;
                std::cout << "/TR:" << m->_in_transit_stack.size();
                std::cout << "/I0:" << m->getInputStack(0)->getAmount();
                std::cout << "/I1:" << m->getInputStack(1)->getAmount();
                std::cout << "/O0:" << m->getOutputStack(0)->getAmount();
                std::cout << "/J:" << m->getJammed();
                std::cout << std::endl;
            }
            if (auto m = std::dynamic_pointer_cast<ResourceExtractor>(entity); m) {
                std::cout << "Extr:" << std::setw(2) << m->getId() << " " << m->name;
                std::cout << "/O0:" << m->getOutputStack(0)->getAmount();
                std::cout << "/EX:" << m->extracting;
                std::cout << std::endl;
            }
            if (auto m = std::dynamic_pointer_cast<Storage>(entity); m) {
                std::cout << "Stor:" << std::setw(2) << m->getId() << " " << m->name;
                std::cout << "/Iron:" << m->getAmount(Resource::IronIngot);
                std::cout << "/Rods:" << m->getAmount(Resource::IronRod);
                // std::cout << "/Cop:" << m->getAmount(Resource::CopperOre);
                std::cout << std::endl;
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(16)); // 60 FPS cap
    }


    return 0;
}
