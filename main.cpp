#include <iostream>
#include "src/factory.h"
#include "src/tools/generators.h"
#include <csignal>
#include <thread>
#include "nlohmann/json.hpp"

using namespace Fac;
using json = nlohmann::json;

volatile sig_atomic_t stop = 0;
auto w = GameWorld();
char *save_file;

void run_generators() {
    generate_resources_header_file("../schemas/types/resources.json", "../src/autogenerated/resources.h");
    generate_recipes_header_file("../data/recipe.json", "../src/autogenerated/recipes.h");
}

void saveWorld(GameWorld &w) {
    std::cout << "Saving world\n";
    std::ofstream current_save_file = std::ofstream(save_file);;
    json j = w;
    auto buffer = std::stringstream();
    buffer << j.dump(4);
    current_save_file << j.dump(4);
    current_save_file.flush();
    current_save_file.close();
    std::cout << "World saved\n";
}

void signal_handler(int signal) {
    stop = 1;
    std::cout << "Signal received: " << signal << std::endl;
    saveWorld(w);
}

void print_machine(std::shared_ptr<SingleMachine> machine) {

    std::cout << "Watched entity: " << machine->getId() << ":";
    std::cout << "Input Amount: " << machine->getInputStack(0)->getAmount() << " " << " / ";
    std::cout << "Output Amount: " << machine->getOutputStack(0)->getAmount() << " " << " / ";
    std::cout << "Processing: " << machine->processing << " / ";
    std::cout << "Progress: " << machine->getRecipe().value().processing_time_s * 1000 - machine->processing_progress << " / ";
    std::cout << std::endl;
    std::cout.flush();
}

void setupGameWorld(GameWorld &w) {
    auto m1 = std::make_shared<SingleMachine>(SingleMachine());
    w.addEntity(m1);
    auto m2 = std::make_shared<SingleMachine>(SingleMachine());
    w.addEntity(m2);
    auto belt = std::make_shared<Belt>(1);
    w.addEntity(belt);
    m1->setRecipe(recipe_IronIngot);
    m2->setRecipe(recipe_IronPlate);
    belt->connectInput(0, m1, 0);
    m2->connectInput(0, belt, 0);
    m1->getInputStack(0)->addAmount(MAX_STACK_SIZE, Resource::IronOre);

    std::cout << "Setup complete\n";
}

// setup a complex game world to produce 240 Units / minutes of screws
void setupGameWorld2(GameWorld &w) {
    auto iron_node = std::make_shared<ResourceNode>(ResourceNode());
    iron_node->setResource(Resource::IronOre);
    iron_node->setResourceQuality(ResourceQuality::Normal);
    w.addEntity(iron_node);
    auto iron_extractor = std::make_shared<ResourceExtractor>(ResourceExtractor());
    iron_extractor->setResourceNode(iron_node);
    w.addEntity(iron_extractor);

    // add a belts and splitter to supply three smelters with ore to produce iron ingots
    auto belt1 = std::make_shared<Belt>(1);
    belt1->connectInput(0, iron_extractor, 0);
    w.addEntity(belt1);
    auto splitter1 = std::make_shared<Splitter>(Splitter());
    splitter1->connectInput(0, belt1, 0);
    w.addEntity(splitter1);

    auto belt2 = std::make_shared<Belt>(1);
    belt2->connectInput(0, splitter1, 0);
    w.addEntity(belt2);

    auto belt3 = std::make_shared<Belt>(1);
    belt3->connectInput(0, splitter1, 1);
    w.addEntity(belt3);

    // create a smelter and connect to belt2
    auto smelter1 = std::make_shared<SingleMachine>(SingleMachine());
    smelter1->setRecipe(recipe_IronIngot);
    smelter1->connectInput(0, belt2, 0);
    w.addEntity(smelter1);

    // create splitter 2 and connect to belt3
    auto splitter2 = std::make_shared<Splitter>(Splitter());
    splitter2->connectInput(0, belt3, 0);
    w.addEntity(splitter2);

    // two more belts to splitter 2
    auto belt4 = std::make_shared<Belt>(1);
    belt4->connectInput(0, splitter2, 0);
    w.addEntity(belt4);

    auto belt5 = std::make_shared<Belt>(1);
    belt5->connectInput(0, splitter2, 1);
    w.addEntity(belt5);


    // create another two smelters and connect to splitter2
    auto smelter2 = std::make_shared<SingleMachine>(SingleMachine());
    smelter2->setRecipe(recipe_IronIngot);
    smelter2->connectInput(0, belt4, 0);
    w.addEntity(smelter2);

    auto smelter3 = std::make_shared<SingleMachine>(SingleMachine());
    smelter3->setRecipe(recipe_IronIngot);
    smelter3->connectInput(0, belt5, 0);
    w.addEntity(smelter3);

    std::cout << "Iron Ingot Setup complete\n";
}


int main(int argc, char *argv[]) {
    std::signal(SIGINT, signal_handler); // CTRL-C
    std::signal(SIGTERM, signal_handler); // Termination request

    // first argument must be a filename for the save file
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <filename>\n";
        return 1;
    }

    save_file = argv[1];
    std::cout << "Save file: " << save_file << std::endl;

    // try to read the world as json from the safe file, if not continue
    if (std::ifstream i(save_file); i) {
        json j;
        i >> j;
        w = j.get<GameWorld>();
        std::cout << "Loaded world from file\n";
        i.close();

    } else {
        setupGameWorld2(w);
        std::cout << "Created new world\n";
    }

    // TODO should be able to have more gameworlds without crashing :)
// setupGameWorld(w);


    std::cout << "Running... (Press CTRL-D or CTRL-C to exit)\n";



    std::string CSI = "\u001B[";
    auto clear = CSI + "2J";
    std::cout << CSI + "s";


    while (!stop) {
        w.processWorldStep();
        std::cout << CSI + "2J";
        for (auto &entity: w.getEntities()) {
            if (auto m = std::dynamic_pointer_cast<SingleMachine>(entity); m) {
                print_machine(m);
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(16)); // 60 FPS cap
    }


    return 0;
}
