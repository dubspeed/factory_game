#include <iostream>
#include "src/factory.h"
#include "src/tools/generators.h"
#include <csignal>
#include <thread>
#include "nlohmann/json.hpp"

using namespace Fac;
using json = nlohmann::json;

volatile sig_atomic_t stop = 0;
auto w = GameWorld();
char *save_file;

void run_generators() {
    generate_resources_header_file("../schemas/types/resources.json", "../src/autogenerated/resources.h");
    generate_recipes_header_file("../data/recipe.json", "../src/autogenerated/recipes.h");
}

void saveWorld(GameWorld &w) {
    std::cout << "Saving world\n";
    std::ofstream current_save_file = std::ofstream(save_file);;
    json j = w;
    auto buffer = std::stringstream();
    buffer << j.dump(4);
    current_save_file << j.dump(4);
    current_save_file.flush();
    current_save_file.close();
    std::cout << "World saved\n";
}

void signal_handler(int signal) {
    stop = 1;
    std::cout << "Signal received: " << signal << std::endl;
    saveWorld(w);
}

void print_machine(std::shared_ptr<SingleMachine> machine) {

    std::cout << "Machine: " << machine->getId() << ":";
    std::cout << "Input Amount: " << machine->getInputStack(0)->getAmount() << " " << " / ";
    std::cout << "Output Amount: " << machine->getOutputStack(0)->getAmount() << " " << " / ";
    std::cout << "Processing: " << machine->processing << " / ";
    std::cout << "Progress: " << machine->getRecipe().value().processing_time_s * 1000 - machine->processing_progress << " / ";
    std::cout << std::endl;
    std::cout.flush();
}

void setupGameWorld(GameWorld &w) {
    auto m1 = std::make_shared<SingleMachine>(SingleMachine());
    w.addEntity(m1);
    auto m2 = std::make_shared<SingleMachine>(SingleMachine());
    w.addEntity(m2);
    auto belt = std::make_shared<Belt>(1);
    w.addEntity(belt);
    m1->setRecipe(recipe_IronIngot);
    m2->setRecipe(recipe_IronPlate);
    belt->connectInput(0, m1, 0);
    m2->connectInput(0, belt, 0);
    m1->getInputStack(0)->addAmount(MAX_STACK_SIZE, Resource::IronOre);

    std::cout << "Setup complete\n";
}

template<typename T>
requires std::derived_from<T, GameWorldEntity>
auto create(GameWorld &w, T entity) {
    auto e = std::make_shared<T>(entity);
    w.addEntity(e);
    return e;
}

auto setResourceAndQuality(std::shared_ptr<ResourceNode> node, Resource resource, ResourceQuality quality) {
    node->setResource(resource);
    node->setResourceQuality(quality);
    return node;
}


typedef std::pair<std::shared_ptr<GameWorldEntity>, int> Connection;

#define CONNECTION(a, b) std::make_pair<std::shared_ptr<GameWorldEntity>, int>(a, b)
#define FROM_SLOT0(a) CONNECTION(a, 0)
#define FROM_SLOT1(a) CONNECTION(a, 1)
#define TO_SLOT0(a) CONNECTION(a, 0)
#define TO_SLOT1(a) CONNECTION(a, 1)

void connectInput(Connection const &from, Connection const &to) {
    const auto connector = std::dynamic_pointer_cast<IInputProvider>(from.first);
    connector->connectInput(from.second, to.first, to.second);
}

void setupGameWorld2(GameWorld &w) {
    auto iron_node = create(w, ResourceNode());
    auto iron_extractor = create(w, ResourceExtractor());
    auto belt1 = create(w, Belt());
    auto belt2 = create(w, Belt());
    auto belt3 = create(w, Belt());
    auto belt4 = create(w, Belt());
    auto belt5 = create(w, Belt());
    auto splitter1 = create(w, Splitter());
    auto splitter2 = create(w, Splitter());
    auto splitter3 = create(w, Splitter());
    auto smelter1 = create(w, SingleMachine());
    auto smelter2 = create(w, SingleMachine());
    auto smelter3 = create(w, SingleMachine());

    setResourceAndQuality(iron_node, Resource::IronOre, ResourceQuality::Normal);
    iron_extractor->setResourceNode(iron_node);
    connectInput(FROM_SLOT0(belt1), TO_SLOT0(iron_extractor));
    connectInput(FROM_SLOT0(splitter1), TO_SLOT0(belt1));
    connectInput(FROM_SLOT0(belt2), TO_SLOT0(splitter1));
    connectInput(FROM_SLOT0(belt3), TO_SLOT1(splitter1));
    connectInput(FROM_SLOT0(smelter1), TO_SLOT0(belt2));
    connectInput(FROM_SLOT0(splitter2), TO_SLOT0(belt3));
    connectInput(FROM_SLOT0(belt4), TO_SLOT0(splitter2));
    connectInput(FROM_SLOT0(belt5), TO_SLOT1(splitter2));
    connectInput(FROM_SLOT0(smelter2), TO_SLOT0(belt4));
    connectInput(FROM_SLOT0(smelter3), TO_SLOT0(belt5));

    smelter1->setRecipe(recipe_IronIngot);
    smelter2->setRecipe(recipe_IronIngot);
    smelter3->setRecipe(recipe_IronIngot);

    smelter1->getOutputStack(0)->addAmount(MAX_STACK_SIZE, Resource::IronIngot);

    std::cout << "Iron Ingot Setup complete\n";
}


int main(int argc, char *argv[]) {
    std::signal(SIGINT, signal_handler); // CTRL-C
    std::signal(SIGTERM, signal_handler); // Termination request

    // first argument must be a filename for the save file
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <filename>\n";
        return 1;
    }

    save_file = argv[1];
    std::cout << "Save file: " << save_file << std::endl;

    // try to read the world as json from the safe file, if not continue
    if (std::ifstream i(save_file); i) {
        json j;
        i >> j;
        w = j.get<GameWorld>();
        std::cout << "Loaded world from file\n";
        i.close();

    } else {
        setupGameWorld2(w);
        std::cout << "Created new world\n";
    }

    // TODO should be able to have more gameworlds without crashing :)
// setupGameWorld(w);


    std::cout << "Running... (Press CTRL-D or CTRL-C to exit)\n";



    std::string CSI = "\u001B[";
    auto clear = CSI + "2J";
    std::cout << CSI + "s";


    while (!stop) {
        w.processWorldStep();
        std::cout << CSI + "2J";
        for (auto &entity: w.getEntities()) {
            if (auto m = std::dynamic_pointer_cast<SingleMachine>(entity); m) {
                print_machine(m);
            }
            if (auto b = std::dynamic_pointer_cast<Belt>(entity); b) {
                std::cout << "Belt: " << b->getId() << ":";
                std::cout << "In Transit: " << b->_in_transit_stack.size() << " / ";
                std::cout << "Output: " << b->getOutputStack(0)->getAmount() << " / ";
                std::cout << "Jammed: " << b->getJammed() << " / ";
                std::cout << std::endl;
            }
            if (auto sp = std::dynamic_pointer_cast<Splitter>(entity); sp) {
                std::cout << "Splitter: " << sp->getId() << ":";
                std::cout << "Output0: " << sp->getOutputStack(0)->getAmount() << " / ";
                std::cout << "Output1: " << sp->getOutputStack(1)->getAmount() << " / ";
                std::cout << "Jammed: " << sp->getJammed() << " / ";
                std::cout << std::endl;
            }
            if (auto ex = std::dynamic_pointer_cast<ResourceExtractor>(entity); ex) {
                std::cout << "Extractor: " << ex->getId() << ":";
                std::cout << "Output: " << ex->getOutputStack(0)->getAmount() << " / ";
                std::cout << std::endl;
            }
            // if (auto s = std::dynamic_pointer_cast<Storage>(entity); s) {
            //     std::cout << "Watched entity: " << s->getId() << ":";
            //     std::cout << "Content: " << s->getAmount(Resource::IronOre) << " / ";
            //     std::cout << "Max Stacks: " << s->getMaxItemStacks() << " / ";
            //     std::cout << std::endl;
            // }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(16)); // 60 FPS cap
    }


    return 0;
}
